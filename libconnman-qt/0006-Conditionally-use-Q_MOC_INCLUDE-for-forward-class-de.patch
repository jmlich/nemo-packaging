From d068445ae2c1ab5dbea3edf2a95020bd7ab013d2 Mon Sep 17 00:00:00 2001
From: Herman van Hazendonk <github.com@herrie.org>
Date: Wed, 15 Jun 2022 09:29:13 +0200
Subject: [PATCH 6/6] Conditionally use Q_MOC_INCLUDE for forward class
 declarations in Qt6

Q_PROPERTY needs to be fully defined in QT6 as per https://stackoverflow.com/questions/66581395/q-property-must-be-fully-defined-error-in-qt-6

Therefore use Q_MOC_INCLUDE when using Qt6

Signed-off-by: Herman van Hazendonk <github.com@herrie.org>
---
 libconnman-qt/marshalutils.cpp | 71 ++++++++++++++++------------------
 libconnman-qt/vpnmanager.h     |  4 ++
 libconnman-qt/vpnmodel.h       |  4 ++
 3 files changed, 42 insertions(+), 37 deletions(-)

diff --git a/libconnman-qt/marshalutils.cpp b/libconnman-qt/marshalutils.cpp
index 062699a..9190d85 100644
--- a/libconnman-qt/marshalutils.cpp
+++ b/libconnman-qt/marshalutils.cpp
@@ -32,49 +32,14 @@
 
 #include <QDebug>
 #include <QDBusArgument> 
+#include <QDBusMetaType>
 #include "vpnconnection.h"
 
 #include "marshalutils.h"
 
-#if defined(__clang__) &&  __clang_major__ >= 11 || __GNUC__ >= 12
-Q_DBUS_EXPORT const QDBusArgument &operator>>(const QDBusArgument &a, RouteStructure &v);
-Q_DBUS_EXPORT QDBusArgument &operator<<(QDBusArgument &a, const RouteStructure &v);
-#endif
-
 // Empty namespace for local static functions
 namespace {
 
-// Marshall the RouteStructure data into a D-Bus argument
-QDBusArgument &operator<<(QDBusArgument &argument, const RouteStructure &routestruct)
-{
-    QVariantMap dict;
-    dict.insert("ProtocolFamily", routestruct.protocolFamily);
-    dict.insert("Network", routestruct.network);
-    dict.insert("Netmask", routestruct.netmask);
-    dict.insert("Gateway", routestruct.gateway);
-
-    argument.beginStructure();
-    argument << dict;
-    argument.endStructure();
-    return argument;
-}
-
-// Retrieve the RouteStructure data from the D-Bus argument
-const QDBusArgument &operator>>(const QDBusArgument &argument, RouteStructure &routestruct)
-{
-    QVariantMap dict;
-    argument.beginStructure();
-    argument >> dict;
-    argument.endStructure();
-
-    routestruct.protocolFamily = dict.value("ProtocolFamily", 0).toInt();
-    routestruct.network = dict.value("Network").toString();
-    routestruct.netmask = dict.value("Netmask").toString();
-    routestruct.gateway = dict.value("Gateway").toString();
-
-    return argument;
-}
-
 QVariant convertState (const QString &key, const QVariant &value, bool toDBus)
 {
     QList<QPair<QVariant, QVariant> > states;
@@ -129,6 +94,39 @@ QVariant convertRoutes (const QString &, const QVariant &value, bool toDBus) {
 
 } // Empty namespace
 
+// Marshall the RouteStructure data into a D-Bus argument
+QDBusArgument &operator<<(QDBusArgument &argument, const RouteStructure &routestruct)
+{
+    QVariantMap dict;
+    dict.insert("ProtocolFamily", routestruct.protocolFamily);
+    dict.insert("Network", routestruct.network);
+    dict.insert("Netmask", routestruct.netmask);
+    dict.insert("Gateway", routestruct.gateway);
+
+    argument.beginStructure();
+    argument << dict;
+    argument.endStructure();
+    return argument;
+}
+
+// Retrieve the RouteStructure data from the D-Bus argument
+const QDBusArgument &operator>>(const QDBusArgument &argument, RouteStructure &routestruct)
+{
+    QVariantMap dict;
+    argument.beginStructure();
+    argument >> dict;
+    argument.endStructure();
+
+    routestruct.protocolFamily = dict.value("ProtocolFamily", 0).toInt();
+    routestruct.network = dict.value("Network").toString();
+    routestruct.netmask = dict.value("Netmask").toString();
+    routestruct.gateway = dict.value("Gateway").toString();
+
+    return argument;
+}
+
+
+
 template<typename T>
 inline QVariant extract(const QDBusArgument &arg)
 {
@@ -188,7 +186,6 @@ QVariantMap MarshalUtils::propertiesToQml(const QVariantMap &fromDBus)
     return rv;
 }
 
-#include <QDBusMetaType>
 // Conversion to/from DBus/QML
 QHash<QString, MarshalUtils::conversionFunction> MarshalUtils::propertyConversions()
 {
diff --git a/libconnman-qt/vpnmanager.h b/libconnman-qt/vpnmanager.h
index 88e509d..fa38cca 100644
--- a/libconnman-qt/vpnmanager.h
+++ b/libconnman-qt/vpnmanager.h
@@ -35,6 +35,10 @@
 
 #include <QObject>
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6,0,0))
+Q_MOC_INCLUDE("vpnconnection.h")
+#endif
+
 class VpnManagerPrivate;
 class VpnManager;
 class VpnConnection;
diff --git a/libconnman-qt/vpnmodel.h b/libconnman-qt/vpnmodel.h
index 36d691b..5c88f12 100644
--- a/libconnman-qt/vpnmodel.h
+++ b/libconnman-qt/vpnmodel.h
@@ -35,6 +35,10 @@
 
 #include <QAbstractListModel>
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6,0,0))
+Q_MOC_INCLUDE("vpnmanager.h")
+#endif
+
 class VpnModelPrivate;
 class VpnManager;
 class VpnConnection;
-- 
2.36.1

